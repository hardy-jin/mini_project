/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Dec 10 2021 04:36:08 GMT+0000 (Coordinated Universal Time).
 */

define(['jointjs', 'css!./styles/SimSMWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'sim-s-m';

    function SimSMWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    SimSMWidget.prototype._initialize = function () {
        console.log(joint);

        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width: width,
            height: height,
            defaultAnchor: { name: 'perpendicular' },
            defaultConnectionPoint: { name: 'boundary' },
            model: this._jointSM,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function (elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmeSM) {
                // console.log(self._webgmeSM.id2state[currentElement.id]);
                self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
            }
        });

        this._webgmeSM = null;
    };

    SimSMWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
        if (this._jointPaper){
            this._jointPaper.setDimensions(width, height);
            this._jointPaper.scaleContentToFit();
        }
    };
    
    // State Machine manipulating functions called from the controller
    SimSMWidget.prototype.initMachine = function (descriptor) {
        const self = this;
        console.log(descriptor);

        self._webgmeSM = descriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        self._jointSM.clear();
        const webSM = self._webgmeSM;
        webSM.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // first add the states
        Object.keys(webSM.states).forEach(stateId => {
            let vertex = null;
            if (webSM.init === stateId) {
                vertex = new joint.shapes.standard.Circle({
                    position: webSM.states[stateId].position,
                    size: { width: 20, height: 20 },
                    attrs: {
                        body: {
                            fill: '#7c68fc',
                            cursor: 'pointer'
                        }
                    }
                });
            } else if (webSM.states[stateId].isEnd) {
                vertex = new joint.shapes.standard.Circle({
                    position: webSM.states[stateId].position,
                    size: { width: 20, height: 20 },
                    attrs: {
                        body: {
                            fill: '#fe854c',
                            cursor: 'pointer'
                        }
                    }
                });
            } else {
                vertex = new joint.shapes.standard.Circle({
                    position: webSM.states[stateId].position,
                    size: { width: 50, height: 50 },
                    attrs: {
                        label: {
                            text: webSM.states[stateId].name,
                            fontWeight: 'bold',
                        },
                        body: {
                            strokeWidth: 2,
                            cursor: 'pointer'
                        }
                    }
                });
            }
            vertex.addTo(self._jointSM);
            webSM.states[stateId].joint = vertex;
            webSM.id2state[vertex.id] = stateId;
        });

        // then create the links
        Object.keys(webSM.states).forEach(stateId => {
            const state = webSM.states[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const connect = new joint.shapes.standard.Link({
                    source: { id: state.joint.id },
                    target: { id: webSM.states[state.next[event]].joint.id },
                    attrs: { line: { strokeWidth: 3},wrapper: {cursor: 'default'}},
                    labels: [{position: {distance: 0.6, offset: 0, args: {keepGradient: true, ensureLegibility: true}},
                        attrs: {text: {text: event, fontWeight: 'bold'}}
                    }]
                });
                connect.addTo(self._jointSM);
                state.jointNext[event] = connect;
            })
        });
        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    SimSMWidget.prototype.destroyMachine = function () {

    };

    SimSMWidget.prototype.fireEvent = function (event) {
        const self = this;
        const current = self._webgmeSM.states[self._webgmeSM.current];
        const connect = current.jointNext[event];
        const viewCon = connect.findView(self._jointPaper);
        viewCon.sendToken(joint.V('circle', { r: 10, fill: 'black' }), { duration: 500 }, function () {
            self._webgmeSM.current = current.next[event];
            self._decorateMachine();
        });


    };

    SimSMWidget.prototype.resetMachine = function () {
        this._webgmeSM.current = this._webgmeSM.init;
        this._decorateMachine();
    };

    SimSMWidget.prototype._decorateMachine = function () {
        const webSM = this._webgmeSM;
        Object.keys(webSM.states).forEach(stateId => {
            webSM.states[stateId].joint.attr('body/stroke', '#fe864c');
        });
        webSM.states[webSM.current].joint.attr('body/stroke', 'blue');
        webSM.setFireableEvents(Object.keys(webSM.states[webSM.current].next));
    };

    SimSMWidget.prototype._setCurrentState = function (newCurrent) {
        this._webgmeSM.current = newCurrent;
        this._decorateMachine();
    };


    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimSMWidget.prototype.destroy = function () {
    };

    SimSMWidget.prototype.onActivate = function () {
        this._logger.debug('SimSMWidget has been activated');
    };

    SimSMWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimSMWidget has been deactivated');
    };

    return SimSMWidget;
});
