/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Dec 10 2021 04:36:08 GMT+0000 (Coordinated Universal Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function SimSMControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;

        this._networkRootLoaded = false;

        this._fireableEvents = null;

        this._initWidgetEventHandlers();

        // we need to fix the context of this function as it will be called from the widget directly
        this.setFireableEvents = this.setFireableEvents.bind(this);

        this._logger.debug('ctor finished');
    }

    // SimSMControl.prototype._initWidgetEventHandlers = function () {
    //     this._widget.onNodeClick = function (id) {
    //         // Change the current active object
    //         WebGMEGlobal.State.registerActiveObject(id);
    //     };
    // };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    SimSMControl.prototype.selectedObjectChanged = function (nodeId) {
        var self = this;
        

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
            self._networkRootLoaded = false;
        }

        self._currentNodeId = nodeId;

        var node = this._client.getNode(nodeId);
        if (node) {
            self._widget.setTitle(node.getAttribute('name'));
        } else {
            self._widget.setTitle('No node selected');
        }

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = { children: 1 };  // Territory "rule"

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }

        
    };

    SimSMControl.prototype._getObjectDescriptor = function (nodeId) {
        var objDesc = {};
        if (this._client.getNode(nodeId)) {
            objDesc.id = nodeId;
            objDesc.name = this._client.getNode(nodeId).getAttribute('name');
            objDesc.childrenIds = this._client.getNode(nodeId).getChildrenIds();
            objDesc.parentId = this._client.getNode(nodeId).getParentId();
            objDesc.isConnection = GMEConcepts.isConnection(nodeId);
            objDesc.children = [];
        }
        return objDesc;
    }


    /* * * * * * * * Node Event Handling * * * * * * * */
    SimSMControl.prototype._eventCallback = function (events) {
        const self = this;
        console.log(events);
        events.forEach(event => {
            if (event.eid &&
                event.eid === self._currentNodeId) {
                if (event.etype == 'load' || event.etype == 'update') {
                    self._networkRootLoaded = true;
                } else {
                    self.clearSM();
                    return;
                }
            }

        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait for additional load cycles
            self._initSM();
        }
    };


    SimSMControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    // TODO: This is a temporary solution to get the node name
    SimSMControl.prototype._initSM = function () {
        const lsMeta = {};
        const self = this;
        const metaNode = self._client.getAllMetaNodes();
        metaNode.forEach(node => {
            lsMeta[node.getAttribute('name')] = node.getId(); //we are using the name as the key
        });
        const curNode = self._client.getNode(self._currentNodeId);
        const smDic = { init: null, states: {} };
        const curID = curNode.getChildrenIds();
        curID.forEach(elementId => {
            const node = self._client.getNode(elementId);
            if (node.isTypeOf(lsMeta['State'])) {
                const checkS = { name: node.getAttribute('name'), next: {}, position: node.getRegistry('position'), isEnd: node.isTypeOf(lsMeta['End']) };
                if ('Init' === self._client.getNode(node.getMetaTypeId()).getAttribute('name')) {
                    smDic.init = elementId;
                }else{
                    curID.forEach(nextId => {
                        const nextNode = self._client.getNode(nextId);
                        if (nextNode.isTypeOf(lsMeta['Transition']) && nextNode.getPointerId('src') === elementId) {
                            checkS.next[nextNode.getAttribute('event')] = nextNode.getPointerId('dst');
                        }
                    });
                    smDic.states[elementId] = checkS;
                }
            }
        });
        smDic.setFireableEvents = this.setFireableEvents;
        self._widget.initMachine(smDic);
    };

    SimSMControl.prototype.clearSM = function () {
        const self = this;
        self._networkRootLoaded = false;
        self._widget.destroyMachine();
    };

    // This function is called by the widget to set the fireable events
    SimSMControl.prototype.setFireableEvents = function (events) {
        this._fireableEvents = events;
        if (events && events.length > 1) {
            this.$btnEventSelector.clear();
            events.forEach(event => {
                this.$btnEventSelector.addButton({
                    text: event,
                    title: 'fire event: ' + event,
                    data: { event: event },
                    clickFn: data => {
                        this._widget.fireEvent(data.event);
                    }
                });
            });
        } else if (events && events.length === 0) {
            this._fireableEvents = null;
        }

        this._displayToolbarItems();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimSMControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    SimSMControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    SimSMControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    SimSMControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, { suppressVisualizerFromNode: true });
        }
    };

    SimSMControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    SimSMControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
            if (this._fireableEvents === null) {
                this.$btnEventSelector.hide();
                this.$btnSingleEvent.hide();
            } else if (this._fireableEvents.length == 1) {
                this.$btnEventSelector.hide();
            } else {
                this.$btnSingleEvent.hide();
            }
        } else {
            this._initializeToolbar();
        }
    };

    SimSMControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    SimSMControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    SimSMControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnReachCheck = toolBar.addButton({
            title: 'Check checkS machine reachability properties',
            icon: 'glyphicon glyphicon-question-sign',
            clickFn: function (/*data*/) {
                const context = self._client.getCurrentPluginContext('ReachCheck', self._currentNodeId, []);
                // !!! it is important to fill out or pass an empty object as the plugin config otherwise we might get errors...
                context.pluginConfig = {};
                self._client.runServerPlugin(
                    'ReachCheck',
                    context,
                    function (err, result) {
                        // here comes any additional processing of results or potential errors.
                        console.log('plugin err:', err);
                        console.log('plugin result:', result);
                    });
            }
        });
        this._toolbarItems.push(this.$btnReachCheck);

        this.$btnResetMachine = toolBar.addButton({
            title: 'Reset simulator',
            icon: 'glyphicon glyphicon-fast-backward',
            clickFn: function (/*data*/) {
                self._widget.resetMachine();
            }
        });
        this._toolbarItems.push(this.$btnResetMachine);

        // when there are multiple events to choose from we offer a selector
        this.$btnEventSelector = toolBar.addDropDownButton({
            text: 'event'
        });
        this._toolbarItems.push(this.$btnEventSelector);
        this.$btnEventSelector.hide();

        // if there is only one event we just show a play button
        this.$btnSingleEvent = toolBar.addButton({
            title: 'Fire event',
            icon: 'glyphicon glyphicon-play',
            clickFn: function (/*data*/) {
                self._widget.fireEvent(self._fireableEvents[0]);
            }
        });
        this._toolbarItems.push(this.$btnSingleEvent);


        /************** Dropdown for event progression *******************/


        this._toolbarInitialized = true;
    };

    return SimSMControl;
});
